"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const path = __importStar(require("path"));
const index_1 = require("./index");
const index_2 = require("./index");
describe('docker-cli-js dockerCommand', () => {
    it('info', () => {
        const result = true;
        expect(result).toBeTruthy();
    });
    it('info', () => {
        const options = new index_1.Options(undefined, undefined, true, undefined, undefined);
        return (0, index_2.dockerCommand)('info', options).then(function (data) {
            // console.log('data', data);
            // console.log('data.object', data.object);
            expect(data).toBeDefined();
        });
    });
    it('build', () => {
        const options = new index_1.Options(undefined, path.join(__dirname, '..', 'test', 'nginx'), true, undefined, undefined);
        const docker = new index_1.Docker(options);
        return docker.command('build -t nginximg .').then(function (data) {
            //console.log('data = ', data);
            expect(data.success).toBeTruthy();
        });
    });
    it('run', () => {
        const options = new index_1.Options(undefined, undefined, false, undefined, undefined);
        const docker = new index_1.Docker(options);
        return docker.command('run -d nginximg').then(function (data) {
            //console.log('data = ', data);
            expect(data.containerId).toBeTruthy();
        });
    });
    // it('info', () => {
    //   const result = true;
    //   expect(result).toBeTruthy();
    // });
    // it('info', () => {
    //   const result = true;
    //   expect(result).toBeTruthy();
    // });
    // it('info', () => {
    //   const result = true;
    //   expect(result).toBeTruthy();
    // });
    // it('info', () => {
    //   const result = true;
    //   expect(result).toBeTruthy();
    // });
    // it('info', () => {
    //   const result = true;
    //   expect(result).toBeTruthy();
    // });
    // it('info', () => {
    //   const result = true;
    //   expect(result).toBeTruthy();
    // });
});
//   t.test('images', (t) => {
//     const docker = new Docker();
//     return docker.command('images').then(function(data) {
//       console.log('data = ', data);
//       t.ok(data.images);
//     });
//   });
//   t.test('network ls', (t) => {
//     const docker = new Docker();
//     return docker.command('network ls').then(function(data) {
//       console.log('data = ', data);
//       t.ok(data.network);
//     });
//   });
//   t.test('inspect', (t) => {
//     const docker = new Docker();
//     return docker.command('inspect nginxcont').then(function(data) {
//       console.log('data = ', data);
//       t.ok(data.object);
//     });
//   });
//   t.test('search', (t) => {
//     const docker = new Docker();
//     return docker.command('search nginxcont').then(function(data) {
//       console.log('data = ', data);
//       t.ok(data.images);
//     });
//   });
//   t.test('login success', (t) => {
//     const docker = new Docker();
//     // if this these credentials ever fail, they should be replaced with new valid ones.
//     return docker.command('login -u myusername -p mypassword').then(function(data) {
//       console.log('data = ', data);
//       // if login succeeds, these tests should pass
//       t.notOk(/error/.test(data));
//       t.ok(data.login);
//     }, function(data) {
//       console.log('data = ', data);
//       // if login is rejected, these tests should fail
//       t.notOk(/error/.test(data));
//       t.ok(data.login);
//     });
//   });
//   t.test('login fail', (t) => {
//     const docker = new Docker();
//     return docker.command('login -u fakeUsername -p fakePassword').then(function(data) {
//       console.log('data = ', data);
//       // if login succeeds, these tests should fail
//       t.ok(/error/.test(data));
//       t.notOk(data.login);
//     }, function(data) {
//       console.log('data = ', data);
//       // if login is rejected, these tests should pass
//       t.ok(/error/.test(data));
//       t.notOk(data.login);
//     });
//   });
//   t.test('pull latest', (t) => {
//     const docker = new Docker();
//     return docker.command('pull nginx').then(function(data) {
//       console.log('data = ', data);
//       t.ok(data.login);
//     });
//   });
//   t.test('pull specific tag', (t) => {
//     const docker = new Docker();
//     return docker.command('pull nginx:1.15.2').then(function(data) {
//       console.log('data = ', data);
//       t.ok(data.login);
//     });
//   });
//   t.test('pull intentionally failed, invalid image', (t) => {
//     const docker = new Docker();
//     return docker.command('pull nginx:999.999.999').then(function(data) {
//       console.log('data = ', data);
//       t.notOk(data.login);
//     }, function(rejected) {
//       console.log('rejected = ', rejected);
//       t.ok(/error/.test(rejected));
//     });
//   });
//   t.test('push intentionally failed, denied repo access', (t) => {
//     const docker = new Docker();
//     return docker.command('push nginx').then(function(data) {
//       console.log('data = ', data);
//       t.ok(data.login);
//     }, function(rejected) {
//         console.log('rejected = ', rejected);
//         t.ok(/error/.test(rejected));
//       });
//     });
//   t.test('push intentionally failed, local image does not exist', (t) => {
//     const docker = new Docker();
//     return docker.command('push dmarionertfulthestoncoag').then(function(data) {
//       console.log('data = ', data);
//       t.ok(data.login);
//     }, function(rejected) {
//       console.log('rejected = ', rejected);
//       t.ok(/error/.test(rejected));
//     });
//   });
//});
//# sourceMappingURL=index.spec.js.map